const defaultEnvSource=(()=>"object"==typeof process?process.env:"undefined"==typeof Deno?{}:Deno.env.toObject())();class EnvKeyNotFoundError extends Error{constructor(a){super(`Required environment variable '${a}' not found.`),this.key=a,this.name="EnvKeyNotFoundError"}}class EnvEmptyStringError extends Error{constructor(a){super(`Required environment variable '${a}' is an empty string.`),this.key=a,this.name="EnvEmptyStringError"}}class Env{constructor(a=defaultEnvSource){this.source=a}get(a,b){let c;return"undefined"!=typeof b&&(c=b+""),a in this.source?this.source[a]:c}has(a){return a in this.source}first(a,b){if(!Array.isArray(a)||1>a.length)throw new TypeError("First argument must be an array of one or more strings.");for(const c of a)if(c in this.source)return this.source[c];let c;return"undefined"!=typeof b&&(c=b+""),c}require(a){const b=this.get(a);if("undefined"==typeof b)throw new Env.KeyNotFoundError(a);else if(""===b)throw new Env.EmptyStringError(a);else return b}requireFirst(a){const b=this.first(a);if("undefined"==typeof b)throw new Env.KeyNotFoundError(`[${a}]`);else if(""===b)throw new Env.EmptyStringError(`[${a}]`);else return b}get exists(){const a=new Proxy(this.source,{get(a,b){if(b in a)return a[b];throw new Env.KeyNotFoundError(b)}});return Object.defineProperty(this,"exists",{value:a,writable:!1,enumerable:!1,configurable:!1}),a}get required(){const a=new Proxy(this.source,{get(a,b){if(b in a){if(""===a[b])throw new Env.EmptyStringError(b);return a[b]}throw new Env.KeyNotFoundError(b)}});return Object.defineProperty(this,"required",{value:a,writable:!1,enumerable:!1,configurable:!1}),a}}Env.KeyNotFoundError=EnvKeyNotFoundError,Env.EmptyStringError=EnvEmptyStringError;export{Env,EnvEmptyStringError,EnvKeyNotFoundError};
